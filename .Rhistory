import
load("~/My Box Files/Prestige/Retail Metrics/RM2/Retail_Metrics_App_appdata.xlsx")
load("~/My Box Files/Prestige/Retail Metrics/RM2/Retail_Metrics_App_appdata.xlsx")
load("~/My Box Files/Prestige/Retail Metrics/RM2/Retail_Metrics_App_extract.xlsx")
install.packages("sqldf")
source('~/My Box Files/Prestige/Adhoc Analysis/Grey market/chord diagram.R')
source('~/My Box Files/Prestige/Adhoc Analysis/Grey market/chord diagram.R')
source('~/My Box Files/Prestige/Adhoc Analysis/Grey market/chord diagram.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/My Box Files/Prestige/Adhoc Analysis/Grey market/chord diagram.R', echo=TRUE)
source('~/My Box Files/Prestige/Adhoc Analysis/Grey market/chord diagram.R', echo=TRUE)
install.packages("jsonlite")
library(jsonlite)
jsonData <- fromJSON("http://openexchangerates.org/api/latest.json?app_id=b399b7cb3faf4d3f951358d32b0d34f2")
install.packages("curl")
jsonData <- fromJSON("http://openexchangerates.org/api/latest.json?app_id=b399b7cb3faf4d3f951358d32b0d34f2")
jsonData <- fromJSON("http://openexchangerates.org/api/latest.json?app_id=b399b7cb3faf4d3f951358d32b0d34f2")
?fromJSON
GET("http://openexchangerates.org/api/latest.json?app_id=b399b7cb3faf4d3f951358d32b0d34f2")
?GET
jsonData <- fromJSON("http://openexchangerates.org/api/latest.json?app_id=b399b7cb3faf4d3f951358d32b0d34f2")
article_key <- "&api-key=c2fede7bd9aea57c898f538e5ec0a1ee:6:68700045"
url <- "http://api.nytimes.com/svc/search/v2/articlesearch.json?q=obamacare+socialism"
req <- fromJSON(paste0(url, article_key))
articles <- req$response$docs
colnames(articles)
?open.connection
?curl
jsonData <- fromJSON("http://openexchangerates.org/api/latest.json?app_id=b399b7cb3faf4d3f951358d32b0d34f2")
head(fromJSON)
?fromJSON
download.file("http://pdf.keysnews.com/frontpage.pdf",destfile="./test.pdf", method="curl")
download.file("http://pdf.keysnews.com/frontpage.pdf",destfile="./test.pdf")
jsonData <- fromJSON("http://openexchangerates.org/api/latest.json?app_id=b399b7cb3faf4d3f951358d32b0d34f2",method="curl")
?ping
??ping
download.file("http://openexchangerates.org/api/latest.json?app_id=b399b7cb3faf4d3f951358d32b0d34f2",destfile="./test.json")
dir()
testJSON <- fromJSON("test.json")
View(testJSON)
?download.file
jsonData <- fromJSON("http://openexchangerates.org/api/latest.json?app_id=b399b7cb3faf4d3f951358d32b0d34f2",method="wget")
read.table("http://openexchangerates.org/api/latest.json?app_id=b399b7cb3faf4d3f951358d32b0d34f2")
readLines(""http://openexchangerates.org/api/latest.json?app_id=b399b7cb3faf4d3f951358d32b0d34f2"")
readLines("http://openexchangerates.org/api/latest.json?app_id=b399b7cb3faf4d3f951358d32b0d34f2")
testJSON <- readLines("http://openexchangerates.org/api/latest.json?app_id=b399b7cb3faf4d3f951358d32b0d34f2")
View(testJSON)
readJSON(testJSON)
?scan
scan(file="http://openexchangerates.org/api/latest.json?app_id=b399b7cb3faf4d3f951358d32b0d34f2")
source('~/My Box Files/Prestige/Adhoc Analysis/Grey market/chord diagram.R', echo=TRUE)
source('~/My Box Files/Prestige/Adhoc Analysis/Grey market/chord diagram.R', echo=TRUE)
install.packages("circlize")
source('~/My Box Files/Prestige/Adhoc Analysis/Grey market/chord diagram.R', echo=TRUE)
insta..packages("circlize")
install.packages("circlize")
source('~/My Box Files/Prestige/Adhoc Analysis/Grey market/chord diagram.R', echo=TRUE)
source('~/My Box Files/Prestige/Adhoc Analysis/Grey market/chord diagram.R', echo=TRUE)
ping()
?ping
source('~/My Box Files/Prestige/Adhoc Analysis/Grey market/chord diagram.R', echo=TRUE)
source('~/My Box Files/Prestige/Adhoc Analysis/Grey market/Countriesdistance.R', echo=TRUE)
lesDist <- rbind_all(mget(lesDist))
lesDist <- lapply(indicePays[-length(indicePays)], lesDistancesUnPays)
lesDist <- rbind_all(lesDist)
View(lesDist)
head(lesDist)
lesDist <- rbind_list(lesDist)
# http://editerna.free.fr/wp/?p=199
# load(url("http://editerna.free.fr/R/Blog/Cartes/countries_distances.RData"))
library(maps)
library(geosphere)
library(dplyr)
world.map <- map("world", fill = TRUE)
indicePays <- seq(1,length(world.map$names))[-grep(":", world.map$names)]
# https://stat.ethz.ch/pipermail/r-help/2010-April/237031.html
splitNA <- function(x){
idx <- 1 + cumsum(is.na(x))
not.na <- !is.na(x)
split(x[not.na], idx[not.na])
}
# Coordinates of every country
lesCoordsX <- splitNA(world.map$x)
lesCoordsY <- splitNA(world.map$y)
lesDistancesUnPays <- function(unIndicePays){
# Borders coordinates for current country
coordsPays <- data.frame(long = lesCoordsX[[unIndicePays]], lat = lesCoordsY[[unIndicePays]])
# Indexes of countries except the current one
# and the one for which the computation has already been done
lesIndicesAutresPays <- indicePays[indicePays > unIndicePays]
distancePoint <- function(unPoint){
unPoint.m <- matrix(unPoint, ncol = 2)
# We need to compute distances between unPoint and every border points of every other countries
# it is given by lesIndicesAutresPays
distancePointPays <- function(unIndicePays2){
coordsPays2 <- matrix(cbind(long = lesCoordsX[[unIndicePays2]], lat = lesCoordsY[[unIndicePays2]]), ncol = 2)
lesDistPointPays2 <- spDists(x=coordsPays2, y=matrix(unPoint, ncol=2), longlat=TRUE)
return(min(lesDistPointPays2)) # shortest distance between unPoint and country which index is unIndicePays2
}
lesDistPointPays2 <- lapply(lesIndicesAutresPays, distancePointPays)
res <- unlist(lesDistPointPays2)
return(res)
}
distancesPays <- apply(coordsPays, 1, distancePoint)
# Shortest distances between unPoint and every other country
if(!is.matrix(distancesPays)){
# For the last country on the list
plusCourtesDistances <- min(distancesPays)
}else{
plusCourtesDistances <- apply(distancesPays, 1, min)
}
resul <- cbind(pays1 = rep(unIndicePays, length(plusCourtesDistances)),pays2 = lesIndicesAutresPays, dist = plusCourtesDistances)
return(resul)
}
# We don't need distances for the last country (they have all been computed)
lesDist <- lapply(indicePays[-length(indicePays)], lesDistancesUnPays)
lesDist <- rbind_list(lesDist)
# We need to recover distances for each couple
lesDist$ID <- paste(sprintf("%04d", lesDist$pays1), sprintf("%04d", lesDist$pays2), sep = "")
lesDist2 <- data.frame(cbind(pays1 = rep(indicePays, each = length(indicePays)),
pays2 = rep(indicePays, length(indicePays))))
lesDist2  <-  lesDist2[-which(lesDist2$pays1 == lesDist2$pays2),]
lesDist2$ID <- paste(sprintf("%04d", lesDist2$pays1), sprintf("%04d", lesDist2$pays2), sep = "")
lesDist2$ID2 <- paste(sprintf("%04d", lesDist2$pays2), sprintf("%04d", lesDist2$pays1), sep = "")
lesDist2$match <- match(lesDist2$ID, lesDist$ID)
lesDist2[is.na(lesDist2$match),"match"] <- match(lesDist2$ID2[is.na(lesDist2$match)], lesDist$ID)
lesDist2$dist <- lesDist[lesDist2$match, "dist"]
lesDist2 <- lesDist2[,c("pays1", "pays2", "dist")]
lesDist <- lesDist2
rm(lesDist2)
# Let's add countries names
lesDist$pays1 <- world.map$names[lesDist$pays1]
lesDist$pays2 <- world.map$names[lesDist$pays2]
source('~/.active-rstudio-document', echo=TRUE)
lesDist <- lapply(indicePays[-length(indicePays)], lesDistancesUnPays)
install.packages("rJava")
install.packages("randomForest")
install.packages("randomForest")
install.packages("quantmod")
source('~/My Box Files/Prestige/Adhoc Analysis/Grey market/Countriesdistance.R', echo=TRUE)
lesDist[lesDist$dist == 0,]
distances <- lesDist
bordercountries <- lesDist[lesDist$dist == 0,]
View(bordercountries)
View(bordercountries)
source('~/My Box Files/Prestige/Adhoc Analysis/Grey market/Countriesdistance.R', echo=TRUE)
source('~/My Box Files/Prestige/Adhoc Analysis/Grey market/chord diagram.R', echo=TRUE)
source('~/My Box Files/Prestige/Adhoc Analysis/Grey market/chord diagram.R', echo=TRUE)
source('~/My Box Files/Prestige/Adhoc Analysis/Grey market/chord diagram.R', echo=TRUE)
source('~/My Box Files/Prestige/Adhoc Analysis/Grey market/chord diagram.R', echo=TRUE)
source('~/My Box Files/Prestige/Adhoc Analysis/Grey market/Countriesdistance.R', echo=TRUE)
source('~/My Box Files/Prestige/Adhoc Analysis/Grey market/chord diagram.R', echo=TRUE)
View(lesDist)
View(bordercountries)
load(url("http://editerna.free.fr/R/Blog/Cartes/countries_distances.RData"))
View(lesDist)
?
load
?url
install.packages("countrycode")
?countrycode
source('~/My Box Files/Prestige/Adhoc Analysis/Grey market/chord diagram.R', echo=TRUE)
source('~/My Box Files/Prestige/Adhoc Analysis/Grey market/chord diagram.R', echo=TRUE)
source('~/My Box Files/Prestige/Adhoc Analysis/Grey market/chord diagram.R', echo=TRUE)
source('~/My Box Files/Prestige/Adhoc Analysis/Grey market/chord diagram.R', echo=TRUE)
source('~/My Box Files/Prestige/Adhoc Analysis/Grey market/chord diagram.R', echo=TRUE)
source('~/My Box Files/Prestige/Adhoc Analysis/Grey market/Countriesdistance.R', echo=TRUE)
install.packages("cshapes")
source('~/.active-rstudio-document', echo=TRUE)
?plotly
source('~/R/test/plotlyapi.R', echo=TRUE)
?py
py
?plotly
source('~/R/test/plotlyapi.R', echo=TRUE)
source('~/R/test/plotlyapi.R', echo=TRUE)
source('~/R/test/plotlyapi.R', echo=TRUE)
source('~/My Box Files/Prestige/Adhoc Analysis/Grey market/chord diagram.R', echo=TRUE)
source('~/My Box Files/Prestige/Adhoc Analysis/Grey market/chord diagram.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
install.packages("KernSmooth")
library(KernSmooth)
cube <- function(x, n) {
x^3
}
cube(3)
x <- 1:10
if(x > 5) {
x <- 0
}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
h <- function(x, y = NULL, d = 3L) {
z <- cbind(x, d)
if(!is.null(y))
z <- z + y
else
z <- z + f
g <- x + y / z
if(d == 3L)
return(g)
g <- g + 10
g
}
getwd()
ls
dir
dir()
cd "My Box Files/DataSciTraining/Repos//RProg-Assignment1"
cd "My Box Files/DataSciTraining/Repos/RProg-Assignment1"
cd "My Box Files/DataSciTraining/
""
cd "My Box Files/"
setwd("My Box Files/DataSciTraining/Repos//RProg-Assignment1")
ls()
dir()
csv1 <- read.csv("specdata//001.csv")
csv1
?read.csv
setwd("My Box Files/DataSciTraining/Repos/RProg-Assignment1")
?list.files
?list.files(path="specdata/")
list.files(path="specdata/")
## Results to find: https://d396qusza40orc.cloudfront.net/rprog%2Fdoc%2Fpollutantmean-demo.html
setwd("My Box Files/DataSciTraining/Repos/RProg-Assignment1")
pollutantmean <- function(directory, pollutant, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'pollutant' is a character vector of length 1 indicating
## the name of the pollutant for which we will calculate the
## mean; either "sulfate" or "nitrate".
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return the mean of the pollutant across all monitors list
## in the 'id' vector (ignoring NA values)
## NOTE: Do not round the result!
sum_pollutant <- 0
count_pollutant <- 1
mean_pollutant <- sum_pollutant / count_pollutant
}
## tests
pollutantmean()
## Results to find: https://d396qusza40orc.cloudfront.net/rprog%2Fdoc%2Fpollutantmean-demo.html
setwd("My Box Files/DataSciTraining/Repos/RProg-Assignment1")
pollutantmean <- function(directory, pollutant, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'pollutant' is a character vector of length 1 indicating
## the name of the pollutant for which we will calculate the
## mean; either "sulfate" or "nitrate".
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return the mean of the pollutant across all monitors list
## in the 'id' vector (ignoring NA values)
## NOTE: Do not round the result!
sum_pollutant <- 0
count_pollutant <- 1
mean_pollutant <- sum_pollutant / count_pollutant
}
## tests
pollutantmean()
pollutantmean(directory="specdata/",pollutant="sulfate")
## Results to find: https://d396qusza40orc.cloudfront.net/rprog%2Fdoc%2Fpollutantmean-demo.html
## setwd("My Box Files/DataSciTraining/Repos/RProg-Assignment1")
pollutantmean <- function(directory, pollutant, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'pollutant' is a character vector of length 1 indicating
## the name of the pollutant for which we will calculate the
## mean; either "sulfate" or "nitrate".
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return the mean of the pollutant across all monitors list
## in the 'id' vector (ignoring NA values)
## NOTE: Do not round the result!
sum_pollutant <- 0
count_pollutant <- 1
mean_pollutant <- sum_pollutant / count_pollutant
mean_pollutant
}
## tests
pollutantmean(directory="specdata/",pollutant="sulfate")
?complete.cases
?complete.cases(csv1)
complete.cases(csv1)
complete <- complete.cases(csv1)
csv1[complete,]
dir <- "specdata/"
list.files(dir)
?paste
?read.csv
filelist[45]
filelist <- list.files(dir)
filelist[45]
csv_data <- read.csv(paste(dir,filelist[45],sep="/"))
csv_data
dir
filelist[45]
paste(dir,filelist[i],sep="/")
i=45
paste(dir,filelist[i],sep="/")
paste(dir,filelist[i])
